name: 'Terraform'
 
on:
  workflow_dispatch:
    inputs:
      destroy:
        description: Destroy Resources
        default: false
        type: boolean
        required: true

env:
  # Login for azure cli
  ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}

  # Terraform variables
  TF_VAR_client_id: ${{ secrets.AZURE_AD_CLIENT_ID }}
  TF_VAR_client_secret: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
  TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  TF_VAR_tenant_id: ${{ secrets.AZURE_AD_TENANT_ID }}
  TF_VAR_rg_name: ${{ secrets.RG }}
  TF_VAR_web_app_name: ${{ secrets.WEBAPP }}
  TF_VAR_app_service_plan_name: ${{ secrets.ASP }}
  TF_VAR_location: ${{ secrets.LOC }}

jobs:
  terraformprepare:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: development
 
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform
 
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: debug secrets
      run: | 
         echo "${{ secrets.ASP }}" | sed -r 's#(.)#\1 #g'
         echo "${{ secrets.WEBAPP }}" | sed -r 's#(.)#\1 #g'
         echo "${{ secrets.LOC }}" | sed -r 's#(.)#\1 #g'

    - uses: hashicorp/setup-terraform@v2

    - run: terraform init
    
    # Normally you would use continue-on-error: false
    # An unresolveable error in the variables.tf
    # file requires this workaround so far.
    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check -diff
      continue-on-error: true

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
 
  terraformapply:
    if: ${{ github.event.inputs.destroy == 'false' }}
    name: 'Terraform Apply'
    needs: [terraformprepare]
    runs-on: ubuntu-latest
    environment: production
 
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
      
    - uses: hashicorp/setup-terraform@v2

    - run: terraform init
    - name: Terraform Apply
      id: apply
      # if: github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve -no-color

  terraformdestroy:
    if: ${{ github.event.inputs.destroy == 'true' }}
    name: 'Terraform Destroy'
    needs: [terraformprepare]
    runs-on: ubuntu-latest
    environment: production
 
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
      
    - uses: hashicorp/setup-terraform@v2

    - run: terraform init
    
    - name: Terraform Destroy
      id: destroy
      # if: github.ref == 'refs/heads/main'
      run: terraform destroy -auto-approve -no-color
